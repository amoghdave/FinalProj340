{"ast":null,"code":"(function () {\n  function getType(x) {\n    // TODO make this faster ?\n    return {}.toString.call(x);\n  }\n\n  function hasOwnKey(obj, key) {\n    return {}.hasOwnProperty.call(obj, key);\n  }\n\n  function copyObject(x) {\n    var output = {}; // TODO use Object.keys ?\n\n    for (var key in x) {\n      if (hasOwnKey(x, key)) {\n        output[key] = copy(x[key]);\n      }\n    }\n\n    return output;\n  }\n\n  function copyArray(x) {\n    var length = x.length;\n    var output = new Array(length);\n\n    for (var i = 0; i < length; ++i) {\n      output[i] = copy(x[i]);\n    }\n\n    return output;\n  } // TODO can this be made faster ?\n  // TODO what about regexps, etc. ?\n\n\n  function copy(x) {\n    switch (getType(x)) {\n      case \"[object Array]\":\n        return copyArray(x);\n\n      case \"[object Object]\":\n        return copyObject(x);\n      // TODO is this necessary ?\n\n      case \"[object Date]\":\n        return new Date(x.getTime());\n\n      default:\n        return x;\n    }\n  }\n\n  function isNaN(x) {\n    return x !== x;\n  }\n\n  function isNumberEqual(x, y) {\n    return x === y || isNaN(x) && isNaN(y);\n  }\n\n  function removeChartListeners(chart, x, y) {\n    if (x !== y) {\n      // TODO is this necessary ?\n      if (x == null) {\n        x = [];\n      } // TODO is this necessary ?\n\n\n      if (y == null) {\n        y = [];\n      }\n\n      var xLength = x.length;\n      var yLength = y.length;\n\n      for (var i = 0; i < xLength; ++i) {\n        var xValue = x[i];\n        var has = false; // TODO make this faster ?\n\n        for (var j = 0; j < yLength; ++j) {\n          var yValue = y[j]; // TODO is this correct ?\n\n          if (xValue.event === yValue.event && xValue.method === yValue.method) {\n            has = true;\n            break;\n          }\n        }\n\n        if (!has) {\n          // TODO is this correct ?\n          chart.removeListener(chart, xValue.event, xValue.method);\n        }\n      }\n    }\n  }\n\n  function updateArray(a, x, y) {\n    var didUpdate = false;\n\n    if (x !== y) {\n      var xLength = x.length;\n      var yLength = y.length;\n\n      if (xLength !== yLength) {\n        a.length = yLength;\n        didUpdate = true;\n      }\n\n      for (var i = 0; i < yLength; ++i) {\n        if (i < xLength) {\n          if (update(a, i, x[i], y[i])) {\n            didUpdate = true;\n          }\n        } else {\n          // TODO make this faster ?\n          a[i] = copy(y[i]); // TODO is this necessary ?\n\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  function update(obj, key, x, y) {\n    var didUpdate = false;\n\n    if (x !== y) {\n      // https://github.com/amcharts/amcharts3-react/issues/40\n      if (hasOwnKey(obj, key)) {\n        var xType = getType(x);\n        var yType = getType(y);\n\n        if (xType === yType) {\n          switch (xType) {\n            case \"[object Array]\":\n              // TODO hacky, remove this after the following bug is fixed:\n              //      Zendesk #28040\n              //      https://codepen.io/team/amcharts/pen/0d61f559cda74682c0ca55d9a24a0f77\n              //      https://www.amcharts.com/kbase/forcing-grouping-stock-chart-data-specific-periods/\n              if (key === \"groupToPeriods\") {\n                // TODO is the copy necessary ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              } else {\n                if (updateArray(obj[key], x, y)) {\n                  didUpdate = true;\n                }\n              }\n\n              break;\n\n            case \"[object Object]\":\n              if (updateObject(obj[key], x, y)) {\n                didUpdate = true;\n              }\n\n              break;\n\n            case \"[object Date]\":\n              if (x.getTime() !== y.getTime()) {\n                // TODO make this faster ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              }\n\n              break;\n\n            case \"[object Number]\":\n              if (!isNumberEqual(x, y)) {\n                // TODO is the copy necessary ?\n                obj[key] = copy(y);\n                didUpdate = true;\n              }\n\n              break;\n\n            default:\n              // TODO is the copy necessary ?\n              obj[key] = copy(y);\n              didUpdate = true;\n              break;\n          } // TODO is this correct ?\n\n        } else {\n          // TODO make this faster ?\n          obj[key] = copy(y);\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  function updateObject(chart, oldObj, newObj) {\n    var didUpdate = false;\n\n    if (oldObj !== newObj) {\n      // TODO use Object.keys ?\n      for (var key in newObj) {\n        if (hasOwnKey(newObj, key)) {\n          // TODO make this faster ?\n          if (hasOwnKey(oldObj, key)) {\n            // TODO should this count as an update ?\n            if (key === \"listeners\") {\n              // TODO make this faster ?\n              removeChartListeners(chart, oldObj[key], newObj[key]);\n            }\n\n            if (update(chart, key, oldObj[key], newObj[key])) {\n              didUpdate = true;\n            }\n          } else {\n            // TODO make this faster ?\n            chart[key] = copy(newObj[key]);\n            didUpdate = true;\n          }\n        }\n      } // TODO use Object.keys ?\n\n\n      for (var key in oldObj) {\n        if (hasOwnKey(oldObj, key) && !hasOwnKey(newObj, key)) {\n          if (key === \"listeners\") {\n            removeChartListeners(chart, oldObj[key], []);\n          }\n\n          delete chart[key];\n          didUpdate = true;\n        }\n      }\n    }\n\n    return didUpdate;\n  }\n\n  var id = 0;\n  AmCharts.React = createReactClass({\n    getInitialState: function getInitialState() {\n      return {\n        id: \"__AmCharts_React_\" + ++id + \"__\",\n        chart: null\n      };\n    },\n    componentDidMount: function componentDidMount() {\n      // AmCharts mutates the config object, so we have to make a deep copy to prevent that\n      var props = copy(this.props.options);\n      var chart = AmCharts.makeChart(this.state.id, props, this.props.delay);\n      this.setState({\n        chart: chart\n      });\n    },\n    // TODO is this correct ? should this use componentWillUpdate instead ?\n    componentDidUpdate: function componentDidUpdate(oldProps) {\n      if (this.state.chart) {\n        var didUpdate = updateObject(this.state.chart, oldProps.options, this.props.options); // TODO make this faster\n\n        if (didUpdate) {\n          this.state.chart.validateNow(true);\n        }\n      }\n    },\n    componentWillUnmount: function componentWillUnmount() {\n      if (this.state.chart) {\n        this.state.chart.clear();\n      }\n    },\n    render: function render() {\n      return React.createElement(\"div\", {\n        id: this.state.id,\n        className: this.props.className,\n        style: this.props.style\n      });\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}